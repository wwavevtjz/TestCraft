import React, { useState, useEffect } from "react";
import axios from "axios";
import "./CSS/Comment.css";
import trash_comment from "../image/trash_comment.png";

const Comment = () => {
  const [comments, setComments] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
  const [newComment, setNewComment] = useState(""); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
  const [loading, setLoading] = useState(true); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
  const [loggedInUser, setLoggedInUser] = useState(""); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  const [memberId, setMemberId] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö member_id ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  const [error, setError] = useState(""); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å localStorage
  useEffect(() => {
    const fetchLoggedInUser = () => {
      const userId = localStorage.getItem("user_id"); // ‡∏î‡∏∂‡∏á member_id ‡∏à‡∏≤‡∏Å localStorage
      const username = localStorage.getItem("username"); // ‡∏î‡∏∂‡∏á username ‡∏à‡∏≤‡∏Å localStorage
      setLoggedInUser(username || "Guest");
      setMemberId(userId || null);
    };

    fetchLoggedInUser();
  }, []); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà component ‡πÇ‡∏´‡∏•‡∏î

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  const fetchComments = async () => {
    try {
      const response = await axios.get("http://localhost:3001/allcomment"); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å Backend
      setComments(response.data); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏ô state
    } catch (error) {
      console.error("Error fetching comments:", error);
      setError("Failed to load comments. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetchComments ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÇ‡∏´‡∏•‡∏î
  useEffect(() => {
    fetchComments();
  }, []); // Empty dependency array means this will run only once when the component mounts.

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
  const handleSubmit = async () => {
    if (!newComment.trim()) {
      alert("Please enter a comment!");
      return;
    }

    try {
      const payload = {
        member_id: 1, // ID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
        member_name: loggedInUser, // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        comment_text: newComment, // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
      };

      console.log("Sending payload:", payload); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ

      const response = await axios.post("http://localhost:3001/comments", payload);

      if (response.status === 201) {
        console.log("Response from server:", response.data); // ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        setNewComment(""); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô textarea

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetchComments ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        fetchComments();
      }
    } catch (error) {
      console.error("Error adding comment:", error); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      alert("Failed to post comment.");
    }
  };

  const handleDelete = async (commentId) => {
    if (window.confirm("Are you sure you want to delete this comment?")) {
      try {
        const response = await axios.delete(`http://localhost:3001/deletecomment/${commentId}`);
        if (response.status === 200) {
          console.log("Comment deleted successfully");
          fetchComments(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö
        }
      } catch (error) {
        console.error("Error deleting comment:", error);
        alert("Failed to delete comment.");
      }
    }
  };




  const formatDate = (dateString) => {
    const date = new Date(dateString); // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô Date object
    return date.toLocaleString("en-US", {
      year: "numeric", // ‡∏õ‡∏µ (‡πÄ‡∏ä‡πà‡∏ô 2025)
      month: "long", // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "January")
      day: "numeric", // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô 19)
      hour: "numeric", // ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡πÄ‡∏ä‡πà‡∏ô 5)
      minute: "numeric", // ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏ä‡πà‡∏ô 38)
      hour12: true, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö 12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (AM/PM)
    });
  };

  return (
    <div className="comment-section">
      <h2 className="comment-title">Comments ({comments.length})</h2>
      <div className="comment-input">
        <textarea
          placeholder={`Add comment as ${loggedInUser}...`} // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô placeholder
          className="comment-textarea"
          value={newComment}
          onChange={(e) => setNewComment(e.target.value)}
        />
        <button className="submit-button" onClick={handleSubmit}>
          Submit
        </button>
      </div>
      {error && <p className="error-message">{error}</p>}
      {loading ? (
        <p>Loading comments...</p>
      ) : (
        comments.map((comment) => { // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ {} ‡∏Ñ‡∏£‡∏≠‡∏ö map
          console.log(comment); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á comment
          return (
            <div key={comment.member_id} className="comment">
              <div className="comment-header">
                <span className="comment-name">{comment.member_name}</span>
                <span className="comment-time">{formatDate(comment.comment_at)}</span> {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ */}
              </div>
              <p className="comment-text">{comment.comment_text}</p>
              <div className="comment-footer">
                <button className="like-button">üëç {comment.likes}</button>
                <button className="reply-button">üí¨ {comment.replies} </button>
                <button className="delete-comment-button" onClick={() => handleDelete(comment.comment_id)}>
                  <img src={trash_comment} alt="trash_comment" className="trash_comment" />
                </button>
              </div>
            </div>
          );
        })
      )}

    </div>
  );
};

export default Comment;
